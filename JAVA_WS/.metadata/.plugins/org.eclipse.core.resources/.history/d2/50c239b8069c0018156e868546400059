package Menus;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import java.util.Vector;
import Logger.LoggerIA;
import MenuUtil.ActionsCLS;
import MenuUtil.MenusSQL;
import MenuUtil.menuOption;
import Utiles.Matrix;
import Utiles.resultsetUseful;

public class MENU_ESCENARIO {
	private Connection conexion;
	private String IDEscenario="";
	private Scanner scanner;
	private LoggerIA log=new LoggerIA("MENU_ESCENARIO");
	
	
	
	
	public MENU_ESCENARIO(Connection connection, Scanner sca, String id) {
		// TODO Auto-generated constructor stub
		conexion=connection;
		scanner=sca;
		IDEscenario = id;
	}
	
	public void OpcionesEscenario() {
		String msg="Accediendo al escenario con id: "+IDEscenario;
		log.WriteMessage(msg);
		System.out.println(msg);
		msg="Buscando opciones...";
		String accion=MenusSQL.getAction(conexion, "MENU_ESCENARIO", scanner);
		ActionsCLS.procesaAccionPorIDEscenario(accion, conexion, scanner, IDEscenario);
	}
	
	
	public void verParamEscenario() {
		String msg="Buscando paramentros del escenario "+IDEscenario;
		log.WriteMessage(msg);
		System.out.println(msg);
		try {
			String Query="SELECT a.ID_PARAM, \n"
						+"       a.DESCRIPCION, \n"
						+"       b.VALOR, \n"
						+"       a.DATA_TYPE \n"
						+"  FROM IA_APP.T_CONFIG_ESC_PARAM a, \n"
						+"       IA_APP.T_CONFIG_ESCENARIOS b \n"
						+" WHERE b.ID_ESCENARIO = "+IDEscenario+" \n"
						+"   AND a.ID_PARAM = b.ID_PARAM \n"
						+"   AND a.MENU = 'INPUT' \n"
						+" ORDER BY a.ID_PARAM";
			log.WriteMessage(Query);
			System.out.println(Query);
			Statement sta=conexion.createStatement();
			ResultSet res=sta.executeQuery(Query);
			msg="Opciones encontradas del escenario "+IDEscenario;
			log.WriteMessage(msg);
			System.out.println(msg);
			msg="Mostrando opciones del escenario "+IDEscenario;
			log.WriteMessage(msg);
			System.out.println(msg);
			while(res.next()) {
				msg="  "+res.getInt(1)+" - "+res.getString(2)+" - '"+res.getString(3)+"' - "+res.getString(4);
				log.WriteMessage(msg);
				System.out.println(msg);
			}
		} catch (Exception e) {
			// TODO: handle exception
			msg="verParamEscenario::ERROR::No se pudieron mostrar los parametros.";
			log.WriteMessage(msg);
			System.out.println(msg);
			msg=e.toString();
			log.WriteMessage(msg);
			System.out.println(msg);
		}
		OpcionesEscenario();
		
	}
	
	public void verStatusEscenario() {
		String msg="Buscando status del escenario "+IDEscenario;
		log.WriteMessage(msg);
		System.out.println(msg);
		try {
			String Query="SELECT a.ID_PARAM, \n"
						+"       a.DESCRIPCION, \n"
						+"       b.VALOR, \n"
						+"       a.DATA_TYPE \n"
						+"  FROM IA_APP.T_CONFIG_ESC_PARAM a, \n"
						+"       IA_APP.T_CONFIG_ESCENARIOS b \n"
						+" WHERE b.ID_ESCENARIO = "+IDEscenario+" \n"
						+"   AND a.ID_PARAM = b.ID_PARAM \n"
						+"   AND a.MENU = 'STATUS' \n"
						+" ORDER BY a.ID_PARAM";
			log.WriteMessage(Query);
			System.out.println(Query);
			Statement sta=conexion.createStatement();
			ResultSet res=sta.executeQuery(Query);
			msg="Status encontrado del escenario "+IDEscenario;
			log.WriteMessage(msg);
			System.out.println(msg);
			msg="Mostrando status del escenario "+IDEscenario;
			log.WriteMessage(msg);
			System.out.println(msg);
			while(res.next()) {
				msg="  "+res.getInt(1)+" - "+res.getString(2)+" - '"+res.getString(3)+"' - "+res.getString(4);
				log.WriteMessage(msg);
				System.out.println(msg);
			}
		} catch (Exception e) {
			// TODO: handle exception
			msg="verStatusEscenario::ERROR::No se pudieron mostrar los parametros.";
			log.WriteMessage(msg);
			System.out.println(msg);
			msg=e.toString();
			log.WriteMessage(msg);
			System.out.println(msg);
		}
		OpcionesEscenario();
		
	}
	
	public void modParamEscenario() {
		Vector<String>ids=new Vector<String>();
		String msg="Buscando paramentros del escenario "+IDEscenario;
		log.WriteMessage(msg);
		System.out.println(msg);
		try {
			String Query="SELECT a.ID_PARAM, \n"
						+"       a.DESCRIPCION, \n"
						+"       b.VALOR, \n"
						+"       a.DATA_TYPE \n"
						+"  FROM IA_APP.T_CONFIG_ESC_PARAM a, \n"
						+"       IA_APP.T_CONFIG_ESCENARIOS b \n"
						+" WHERE b.ID_ESCENARIO = "+IDEscenario+" \n"
						+"   AND a.ID_PARAM = b.ID_PARAM"
						+"   AND a.MENU = 'INPUT' \n"
						+" ORDER BY a.ID_PARAM";
			log.WriteMessage(Query);
			System.out.println(Query);
			Statement sta=conexion.createStatement();
			ResultSet res=sta.executeQuery(Query);
			String[][] matOpciones=resultsetUseful.resultsetToMatrix(res);
			if(matOpciones.length<1) {
				msg="No se encontraron parametros para el escenario "+IDEscenario;
				log.WriteMessage(msg);
				System.out.println(msg);
				OpcionesEscenario();
				return;
			}
			
			for(int i=0;i<matOpciones.length;i++) {
				ids.add(matOpciones[i][0]);
			}
			
			boolean valorvalido=false;
			while (valorvalido==false) {
				msg="";
				log.WriteMessage(msg);
				System.out.println(msg);
				msg="Seleccione el parametro que desea modificar: ";
				log.WriteMessage(msg);
				System.out.println(msg);
				Matrix.printMatrix(matOpciones, true);	
				msg="0 - Volver";
				log.WriteMessage(msg);
				System.out.println(msg);
				String opcionElegida=scanner.nextLine();
				if(opcionElegida.equals("0")) {
					OpcionesEscenario();
					return;
				}
				
				if(menuOption.existeOpcion(ids, opcionElegida)){
					valorvalido=true;
					for(int i=0;i<ids.size();i++) {
						if(ids.get(i).equals(opcionElegida)) {
							modificaParam(ids.get(i), matOpciones[i][2], matOpciones[i][3], matOpciones[i][1]);
						}
					}
				}else {
					msg="El parametro seleccionado no es valido. Debe seleccionar una opcion de la lista.";
					log.WriteMessage(msg);
					System.out.println(msg);
				}
			
			}
		}catch (Exception e) {
			// TODO: handle exception
			msg="modParamEscenario::ERROR::No se pudieron cambiar parametros.";
			log.WriteMessage(msg);
			System.out.println(msg);
			msg=e.toString();
			log.WriteMessage(msg);
			System.out.println(msg);
		}
		
	}
	
	public void procesaFicheros() {
		
		System.out.println("void::procesaFicheros");

		OpcionesEscenario();
	}
	public void modAutoCorrel() {
		
		System.out.println("void::modAutoCorrel");

		OpcionesEscenario();
	}
	public void borraEscenario() {
		
		System.out.println("void::borraEscenario");
		
		String msg="Entrando a borrar el escenario "+IDEscenario;
		log.WriteMessage(msg);
		System.out.println(msg);
		msg="";
		log.WriteMessage(msg);
		System.out.println(msg);
		msg="El escenario se borrara junto a toda su parametrizacion. ¿Esta de acuerdo?";
		boolean respuesta=MenusSQL.preguntaConfirmacion(msg, scanner);
		if (respuesta==false) {
			msg="No se borrara el escenario "+IDEscenario;
			log.WriteMessage(msg);
			System.out.println(msg);
		}else {
			msg="Borrando el escenario "+IDEscenario+"...";
			log.WriteMessage(msg,true);
			
			try {
				CallableStatement stat=conexion.prepareCall("{call IA_APP.BORRA_ESCENARIO(?,?,?)}");
				stat.setInt(1, Integer.parseInt(IDEscenario));
				stat.registerOutParameter(2, java.sql.Types.INTEGER);
				stat.registerOutParameter(3, java.sql.Types.VARCHAR);
				stat.executeUpdate();
				int res=stat.getInt(2);
				String resStr=stat.getString(3);
				
				msg=resStr;
				System.out.println(msg);
				log.WriteMessage(msg);
				
				if (res==1) {
					conexion.commit();
					msg="Borrado el escenario "+IDEscenario;
					log.WriteMessage(msg);
					System.out.println(msg);
					
					String action="escenariosExistentes";
					ActionsCLS.procesaAccion(action, conexion, scanner);
					return;
					
				}else if (res==0) {
					conexion.rollback();
					msg="No se pudo borrar el escenario "+IDEscenario;
					log.WriteError(msg);
					System.out.println(msg);
				}	
			} catch (Exception e) {
				// TODO: handle exception
				msg="Error al borrar el escenario "+IDEscenario;
				System.out.println(msg);
				log.WriteError(msg);
				try {
					conexion.rollback();
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
		}
		OpcionesEscenario();
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	private void modificaParam(String idParam, String valorActual, String tipoDato, String descripcion) {
		
		String msg="Accediendo a la modificacion del parametro '"+descripcion+"'";
		System.out.println(msg);
		log.WriteMessage(msg);
		msg="El valor actual es: '"+valorActual+"'";
		System.out.println(msg);
		log.WriteMessage(msg);
		
		boolean valorvalido=false;
		while (valorvalido==false) {
			msg="Indique el nuevo valor";
			System.out.println(msg);
			log.WriteMessage(msg);
			String valorNuevo=""+scanner.nextLine();
			log.WriteMessage(valorNuevo);
			if(esParametroNuevoValido(valorNuevo, tipoDato)==false) {
				msg="'"+valorNuevo+"' no es un "+tipoDato+" valido.";
			}else {
				String consulta="Se va a modificar el parametro '"+descripcion+"' cambiando '"+valorActual+"' por "+valorNuevo+"'. ¿Esta de acuerdo? (S/N)";
				String decision=menuOption.procesaConsultaSINO(consulta, scanner);
				
				if(decision.equals("S")) {
					
					try {
						
						CallableStatement stat=conexion.prepareCall("{call IA_APP.MODIFICA_PARAM_ESCENARIO(?,?,?,?,?)}");
						stat.setInt(1, Integer.parseInt(IDEscenario));
						stat.setInt(2, Integer.parseInt(idParam));
						stat.setString(3, valorNuevo);
						stat.registerOutParameter(4, java.sql.Types.INTEGER);
						stat.registerOutParameter(5, java.sql.Types.VARCHAR);
						stat.executeUpdate();
						int res=stat.getInt(4);
						String resStr=stat.getString(5);
						
						msg=resStr;
						System.out.println(msg);
						log.WriteMessage(msg);
						
						if (res==1) {
							conexion.commit();
							msg="Se actualizo el parametro '"+descripcion+"' a '"+valorNuevo+"'";
							log.WriteMessage(msg);
							System.out.println(msg);
						}else if (res==0) {
							conexion.rollback();
							msg="Algo fallo al actualizar el parametro '"+descripcion+"'";
							log.WriteError(msg);
							System.out.println(msg);
						}	
					} catch (Exception e) {
						// TODO: handle exception
						msg="Error al actualizar el valor";
						System.out.println(msg);
						log.WriteError(msg);
						try {
							conexion.rollback();
						} catch (Exception e2) {
							// TODO: handle exception
						}
					}
					
					modParamEscenario();
					return;
					
				}else if (decision.equals("N")) {
					msg="Modificacion cancelada";
					System.out.println(msg);
					log.WriteMessage(msg);
					modParamEscenario();
					return;
				}
			}
		}
		

	}
	
	
	private boolean esParametroNuevoValido(String valor, String tipoDato) {
		
		if(valor.equals("")) {
			return false;
		}
		
		if(tipoDato.contains("VARCHAR") || valor.length()>0) {
			return true;
		}
		
		if(tipoDato.equals("INT")) {
			try {
				Integer.parseInt(valor);
				return true;
			} catch (Exception e) {
				// TODO: handle exception
				return false;
			}
		}
		
		if(tipoDato.contains("NUMERIC")) {
			try {
				Double.parseDouble(valor);
				return true;
			} catch (Exception e) {
				// TODO: handle exception
				return false;
			}
		}
		
		String msg="tipo de dato desconocido::"+tipoDato;
		log.WriteError(msg);
		System.out.println(msg);
		return false;
	}
}
